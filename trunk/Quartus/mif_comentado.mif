DEPTH = 256;
WIDTH = 8;

ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;

CONTENT
BEGIN

-- lui $2, 172 (decimal)
000 : 10101100;
001 : 00000000;
002 : 00000010;
003 : 00111100;

-- srl $2, $2, 16
004 : 00000010;
005 : 00010100;
006 : 01000000;
007 : 00000000;

-- lw $2, 0($2)
008 : 00000000;
009 : 00000000;
010 : 01000010;
011 : 10001100;

-- lui $7, 0x32
012 : 00110010;
013 : 00000000;
014 : 00000111;
015 : 00111100;

-- srl $7, $7, 16
016 : 00000010;
017 : 00111100;
018 : 11100000;
019 : 00000000;

-- xor $8,$8, $8
020 : 00100110;
021 : 01000000;
022 : 00001000;
023 : 00000001;

-- lui $8, 0xFFFF (hexa-decimal)
024 : 11111111;
025 : 11111111;
026 : 00001000;
027 : 00111100;

-- srl $8, $8, 16
028 : 00000010;
029 : 01000100;
030 : 00000000;
031 : 00000001;

-- sw $2, 0($29)
032 : 00000000;
033 : 00000000;
034 : 10100010;
035 : 10101111;

-- addi $29, $29, -4
036 : 11111100;
037 : 11111111;
038 : 10111101;
039 : 00100011;

-- xor $5, $5, $5
040 : 00100110;
041 : 00101000;
042 : 10100101;
043 : 00000000;

-- loop: lui $1,0
044 : 00000000;
045 : 00000000;
046 : 00000001;
047 : 00111100;

-- jal procure
048 : 00011101;
049 : 00000000;
050 : 00000000;
051 : 00001100;

-- bne $1, $0, fim
052 : 00000011;
053 : 00000000;
054 : 00100000;
055 : 00010100;

-- addi $5, $5, 1
056 : 00000001;
057 : 00000000;
058 : 10100101;
059 : 00100000;

-- addi $2, $2, 2
060 : 00000010;
061 : 00000000;
062 : 01000010;
063 : 00100000;

-- j loop
064 : 00001011;
065 : 00000000;
066 : 00000000;
067 : 00001000;

-- fim:	addi $5, $5,1
068 : 00000001;
069 : 00000000;
070 : 10100101;
071 : 00100000;

-- addi $29,$29,4
072 : 00000100;
073 : 00000000;
074 : 10111101;
075 : 00100011;

-- lw $2,0($29)
076 : 00000000;
077 : 00000000;
078 : 10100010;
079 : 10001111;

-- mult $5, $2
080 : 00011000;
081 : 00000000;
082 : 10100010;
083 : 00000000;

-- mfhi $8
084 : 00010000;
085 : 01000000;
086 : 00000000;
087 : 00000000;

-- mflo $9
088 : 00010010;
089 : 01001000;
090 : 00000000;
091 : 00000000;

-- div $9, $5
092 : 00011010;
093 : 00000000;
094 : 00100101;
095 : 00000001;

-- mfhi $10
096 : 00010000;
097 : 01010000;
098 : 00000000;
099 : 00000000;

-- mflo $11
100 : 00010010;
101 : 01011000;
102 : 00000000;
103 : 00000000;

-- mthi $10
104 : 00010001;
105 : 01010000;
106 : 00000000;
107 : 00000000;

-- mfhi $3
108 : 00010000;
109 : 00011000;
110 : 00000000;
111 : 00000000;

-- break
112 : 00001101;
113 : 00000000;
114 : 00000000;
115 : 00000000;

-- procure: lh   $4, 4($2)
116 : 00000100;
117 : 00000000;
118 : 01000100;
119 : 10000100;

-- and $6, $4, $8
120 : 00100100;
121 : 00110000;
122 : 10001000;
123 : 00000000;

-- andi $6,$6, 0xFF (hexa-decimal)
124 : 11111111;
125 : 00000000;
126 : 11000110;
127 : 00110100;

-- beq  $6,$7, retorno
128 : 00000100;
129 : 00000000;
130 : 11000111;
131 : 00010000;

-- beq  $6, $0, fimfrase
132 : 00000010;
133 : 00000000;
134 : 11000000;
135 : 00010000;

-- addi $2, $2, 1
136 : 00000001;
137 : 00000000;
138 : 01000010;
139 : 00100000;

-- j procure
140 : 00011101;
141 : 00000000;
142 : 00000000;
143 : 00001000;

-- fimfrase: lui $1, 0xff
144 : 11111111;
145 : 00000000;
146 : 00000001;
147 : 00111100;

-- retorno: jr $31
148 : 00001000;
149 : 00000000;
150 : 11100000;
151 : 00000011;

-- memória
172 : 00001010; -- 10
176 : 01110010; -- 114
177 : 01101100; -- 108
178 : 01101101; -- 109
179 : 10010111; -- 0x97
180 : 00110010; -- 0x32
181 : 01100101; -- 101
182 : 01101100; -- 108
183 : 01110011; -- 115
184 : 01101110; -- 110
185 : 00110010; -- 0x32
186 : 01110100; -- 116
187 : 01101100; -- 108
188 : 01100110; -- 102
189 : 00000000; -- 0

END;
